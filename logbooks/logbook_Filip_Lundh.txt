
Tuesday March 28 -

 - Gathered the whole team and introduced ourselves
 - Decided to use SCRUM as our method of working with the project
 - We split up into teams and are now working in different teams of 3 for each part of the system (backend, mobile-app and mower)

2,5h
 
Wednesday March 30 -
 - Group meeting on what to focus on in the start
 - Set up our source code in GitHub
 - Initialised our backend environment, using node.js and structured the folders
 - Added docker and docker-compose files

6h

Thursday March 31 -
 - Continued our work on the folder structure and added awilix for dependency injection
 - Had som struggles with nodemon, but figured it out.
 - Decided to use MySQL as Database
 - Set up tables and relations for the system
 - created overall system architecture in draw.io
 - created table relations architecture in draw.io

6,5h

Tuesday April 5 -
 - Added nginx reverse proxy for AWS instance which routes traffic from port 80 to our application at port 3000
 - Started working on AWS RDS and S3 buckets

5h

Wednesday April 6 -
 - Set up AWS S3 bucket for uploading images taken by the mower
 - Configured our node application to connect to our AWS S3 bucket
 - Created an API endpoint for uploading a file via HTTP request to our S3 bucket
 - Created an API endpoint for downloading a file via HTTP request from our S3 bucket

8h

 Thursday April 7 -
  - Set up AWS RDS instance for our production MySQL database
  - Set up connection to this AWS RDS MySQL with our node application
  - Changed our env file to be able to select between our production db and test docker db 
  - Started working on API for mowers to send coordinates

6h

Monday April 11 - 
   - Set up Google Vision API
   - Added and configured the Vision API in our backend application
   - Added repository and class for events
   - Created business logic layer for events

7,5h

Wednesday April 13 -
 - Moved s3bucket service and google vision service to business logic layer
 - Added validation to event requests
 - Moved all file upload and google vision logic to business logic layer

6,5h

Thursday April 14 -
 - Attended Lecture
 - Meeting with Backend team
 - Started looking into classes for error handling

5h

Tuesday April 19 - 
 - Sprint planning meeting

1h

Wednesday April 20 -
 - Fixed express server crash on event get request when event not found
 - Prevent express server from crashing if no image in event post request
 - Discussed the flow of the backend system and how it is supposed to work with the mower
 - Started working on REST API documentation with Swagger/OpenAPI

6,5h

Thursday April 21 - 
 - Explained flow for mower and app teams
 - Continued on REST API documentation
 - Created a mock REST API for the mower team to test all commands

6h

Sunday April 24 -
 - Rewrote the code for the event router to use the new class structure
 - Implemented GET /events for all events of a certain mower
 - Implemented GET /events for all events of a specific user

5h

Tuesday April 26 -
- Fixed error handling for /images GET requests
- Changed the column name filename to image_id in the database
- Fixed some small bugs

6h

Wednesday April 27
- Continued the documentation

3h

Wednesday April 28 - 
- Implemented the Event endpoints which now uses the new event class
- Made some bug fixes
- Meeting with all the teams regarding how far we have come and what to do next
- Finished the documentation in swagger for events and images requests

7h

Monday May 2 -
- Implemeneted set is_event to true in Coordinates when posting new Event
- Implemented POST /coordinates endpoint
- Fixed get coordinates in GET journey
- Implemented GET /journeys endpoint
- Implemented GET /journeys/:id endpoint
- Implemented start and stop journey API endpoints
- Altered the database is_event column to both development db and production db in AWS

8h

Tuesday May 3 -
- Altered production database to contain column is_event for table Coordinate
- Altered production database to contain column mower_id for table Events
- Tested the production REST API with the new API endpoints
- Started adding new API endpoints to the documentation

7,5h

Thursday May 5 -
- Team retrospective where we discussed we discussed what went well during the project as well as what could have been better and if there is anything to do different in the future
- Finished the documentation in Swagger for the remaining endpoints (POST /coordinate, all the different GET endpoints for Journeys)
- Fixed some missing data when requesting a single event (date/time of event)
- Fixed some async issues in GET /events
- Added a response to POST /coordinates which now returns the inserted ID

8h